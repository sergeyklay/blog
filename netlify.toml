[build]
  publish = 'public'
  command = 'make netlify-production-build'

[context.production.environment]
  HUGO_VERSION = '0.100.1'
  HUGO_ENV = 'production'
  HUGO_ENABLEGITINFO = 'true'

[context.split1]
  command = 'make netlify-split1-build'

[context.split1.environment]
  HUGO_VERSION = '0.100.1'
  HUGO_ENV = 'production'

[context.deploy-preview]
  command = 'make netlify-deploy-preview'

[context.deploy-preview.environment]
  HUGO_VERSION = '0.100.1'

[context.branch-deploy]
  command = 'make netlify-branch-deploy'

[context.branch-deploy.environment]
  HUGO_VERSION = '0.100.1'

[context.next.environment]
  HUGO_ENABLEGITINFO = 'true'

# There are a basic set of standard security headers that every
# website should set to help make your website more secure.
[[headers]]
  for = "/*"
  [headers.values]
    # This sets whether you want your website to be in a frame or not.
    # Most of the time you don’t, as it can open up a website to clickjacking.
    X-Frame-Options = "DENY"
    # In older browsers and mainly Safari, this stops pages loading
    # when they detect reflected cross-site scripting attacks.
    X-XSS-Protection = "1; mode=block"
    # Used to stop browser from sniffing and changing MIME content type.
    X-Content-Type-Options = "nosniff"
    # This controls how much referrer information is included with
    # requests.
    Referrer-Policy = "same-origin"
    # Inform browsers that the site should only be accessed using HTTPS,
    # and that any future attempts to access it using HTTP should automatically
    # be converted to HTTPS.
    #
    # includeSubDomains - If this optional parameter is specified, this rule
    #                     applies to all of the site's subdomains as well.
    #
    # preload - If this optional parameter is specified, the browser will
    #           send a preload request to the server for the HTTPS version
    #           of the resource as soon as the user switches to the HTTPS
    #           version of the page.
    Strict-Transport-Security = "max-age=31536000; includeSubDomains; preload"
    # This used to be called Feature Policy and is mainly only support by
    # Chrome browsers. It’s used to control what browser APIs can be used.
    Permissions-Policy = "accelerometer=(), camera=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), payment=(), usb=(), interest-cohort=()"
    # CSP makes it possible for server administrators to reduce or eliminate
    # the vectors by which XSS can occur by specifying the domains that the
    # browser should consider to be valid sources of executable scripts.
    # A CSP compatible browser will then only execute scripts loaded in source
    # files received from those allowed domains, ignoring all other scripts
    # (including inline scripts and event-handling HTML attributes).
    #
    # Default to only allow content from the current site
    # Allow images from current site and imgur.com
    # Don't allow objects such as Flash and Java
    # Only allow scripts from the current site
    # Only allow styles from the current site
    # Only allow frames from the current site
    # Restrict URL's in the <base> tag to current site
    # Allow forms to submit only to the current site and https://submit-form.com
    Content-Security-Policy = "default-src 'self'; img-src 'self' https://i.imgur.com; object-src 'none'; script-src 'self'; style-src 'self'; frame-ancestors 'self'; base-uri 'self'; form-action 'self' 'https://submit-form.com';"

[[headers]]
  for = '/feeds/*.xml'
  [headers.values]
    # The correct header Content-Type header for an Atom feed is
    # application/atom+xml. However, Chromium does not handle it
    # correctly (see https://code.google.com/p/chromium/issues/detail?id=104358).
    #
    # The most compatible header is 'text/xml; charset=utf-8', which
    # will cause the feed to be parsed correctly by most clients.
    # Note that you should be encoding your feed in UTF-8.
    Content-Type = 'text/xml; charset=utf-8'

[[headers]]
  for = '/*/feeds/*.xml'
  [headers.values]
    # The same reason as above applies to Atom feeds.
    Content-Type = 'text/xml; charset=utf-8'

[[headers]]
  for = '/feeds/*.json'
  [headers.values]
    # JSON Feed files should be served using the MIME type application/json
    # and should be encoded using UTF-8.
    Content-Type = 'application/feed+json; charset=utf-8'

[[headers]]
  for = '/*/feeds/*.json'
  [headers.values]
    Content-Type = 'application/feed+json; charset=utf-8'

[[headers]]
  for = '/manifest.webmanifest'
  [headers.values]
    # The .webmanifest extension is specified in the Media type registration
    # section of the specification (the response of the manifest file should
    # return Content-Type: application/manifest+json).
    #
    # For more see: https://w3c.github.io/manifest/#media-type-registration=
    Content-Type = 'application/manifest+json; charset=utf-8'

[[headers]]
  for = '/robots.txt'
  [headers.values]
    # The server’s robots.txt file must be saved as plain text with
    # ASCII character encoding.
    Content-Type = 'text/plain; charset=us-ascii'

[[redirects]]
  from = '/posts'
  to = '/posts.html'
  status = 301
  force = false

[[redirects]]
  from = '/feeds/rss/posts.xml'
  to = '/feeds/feed.rss.xml'
  status = 301
  force = false

[[redirects]]
  from = '/feeds/atom/posts.xml'
  to = '/feeds/feed.atom.xml'
  status = 301
  force = false

[[redirects]]
  from = '/page/about.html'
  to = '/about.html'
  status = 301
  force = false

[[redirects]]
  from = '/static/serghei.asc'
  to = '/serghei.asc'
  status = 301
  force = false

[[redirects]]
  from = '/post/2021/9/14/zapusk-celery-zadachi-posle-vypolneniya-vseh-zadach.html'
  to = '/posts/2021/09/14/zapusk-celery-zadachi-posle-vypolneniya-vseh-zadach.html'
  status = 301
  force = false

[[redirects]]
  from = '/post/2021/10/8/processy-potoki-i-konkurentnoe-vypolnenie-programm.html'
  to = '/posts/2021/10/08/processy-potoki-i-konkurentnoe-vypolnenie-programm.html'
  status = 301
  force = false


[[redirects]]
  from = '/post/2019/3/19/yazyk-yazykov-chast-pervaya.html'
  to = '/posts/2019/03/19/yazyk-yazykov-chast-pervaya.html'
  status = 301
  force = false

[[redirects]]
  from = '/post/2019/6/28/yazyk-yazykov-chast-vtoraya.html'
  to = '/posts/2019/06/28/yazyk-yazykov-chast-vtoraya.html'
  status = 301
  force = false

[[redirects]]
  from = '/post/2021/4/14/shpargalka-po-osnovnym-komandam-gpg.html'
  to = '/posts/2021/04/14/shpargalka-po-osnovnym-komandam-gpg.html'
  status = 301
  force = false
