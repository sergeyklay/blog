# Settings in the [build] context are global and are applied to
# all contexts unless otherwise overridden by more specific contexts.
[build]
  # Directory that contains the deploy-ready HTML files and
  # assets generated by the build. This is relative to the base
  # directory if one has been set, or the root directory if
  # a base has not been set. This sample publishes the directory
  # located at the absolute path "root/project/build-output"
  publish = 'public'

[build.environment]
  HUGO_VERSION = '0.101.0'
  HUGO_ENABLEGITINFO = 'true'

# Production context: all deploys from the Production branch
# set in your site’s Branches settings in the UI will inherit
# these settings. You can define environment variables
# here but we recommend using the Netlify UI for sensitive
# values to keep them out of your source repository.
[context.production]
  command = 'hugo'

[context.production.environment]
  HUGO_ENV = 'production'

# Deploy Preview context: all deploys generated from
# a pull/merge request will inherit these settings.
[context.deploy-preview]
  command = 'hugo --buildDrafts --buildFuture --baseURL ${DEPLOY_PRIME_URL}'

[context.deploy-preview.environment]
  HUGO_ENV = 'development'

# Branch Deploy context: all deploys that are not from
# a pull/merge request or from the Production branch
# will inherit these settings.
[context.branch-deploy]
  command = 'hugo --buildDrafts --buildFuture --baseURL ${DEPLOY_PRIME_URL}'

[context.branch-deploy.environment]
  HUGO_ENV = 'development'

# There are a basic set of standard security headers that every
# website should set to help make your website more secure.
[[headers]]
  for = '/*'
  [headers.values]
    # This sets whether you want your website to be in a frame or not.
    # Most of the time you don’t, as it can open up a website to clickjacking.
    X-Frame-Options = 'DENY'
    # In older browsers and mainly Safari, this stops pages loading
    # when they detect reflected cross-site scripting attacks.
    X-XSS-Protection = '1; mode=block'
    # Used to stop browser from sniffing and changing MIME content type.
    X-Content-Type-Options = 'nosniff'
    # This controls how much referrer information is included with
    # requests.
    Referrer-Policy = 'same-origin'
    # Inform browsers that the site should only be accessed using HTTPS,
    # and that any future attempts to access it using HTTP should automatically
    # be converted to HTTPS.
    #
    # includeSubDomains - If this optional parameter is specified, this rule
    #                     applies to all of the site's subdomains as well.
    #
    # preload - If this optional parameter is specified, the browser will
    #           send a preload request to the server for the HTTPS version
    #           of the resource as soon as the user switches to the HTTPS
    #           version of the page.
    Strict-Transport-Security = 'max-age=31536000; includeSubDomains; preload'
    # This used to be called Feature Policy and is mainly only support by
    # Chrome browsers. It’s used to control what browser APIs can be used.
    Permissions-Policy = '''
    accelerometer=(),
    camera=(),
    geolocation=(),
    gyroscope=(),
    magnetometer=(),
    microphone=(),
    payment=(),
    usb=()'''
    # CSP makes it possible for server administrators to reduce or eliminate
    # the vectors by which XSS can occur by specifying the domains that the
    # browser should consider to be valid sources of executable scripts.
    # A CSP compatible browser will then only execute scripts loaded in source
    # files received from those allowed domains, ignoring all other scripts
    # (including inline scripts and event-handling HTML attributes).
    Content-Security-Policy = """
    default-src 'self';
    script-src 'self' www.googletagmanager.com hypothes.is cdn.hypothes.is;
    style-src 'self' fonts.googleapis.com cdn.hypothes.is;
    img-src 'self' data: *.google-analytics.com www.googletagmanager.com www.gstatic.com stats.g.doubleclick.net www.google.ge www.google.ru www.google.gr www.google.pl www.google.com.np www.google.co.in www.google.co.uk www.google.com.ua www.google.pt www.google.de www.google.com.ar www.google.co.uz www.google.ca www.google.am;
    connect-src 'self' *.google-analytics.com *.analytics.google.com analytics.google.com www.googletagmanager.com stats.g.doubleclick.net api.botpoison.com www.google.ru www.google.com www.google.pl www.google.com.ar;
    frame-src hypothes.is;
    frame-ancestors 'none';
    form-action 'self' submit-form.com;
    upgrade-insecure-requests;
    base-uri 'self';
    report-uri https://egrep.report-uri.com/r/d/csp/enforce"""

[[headers]]
  for = '/feeds/*.xml'
  [headers.values]
    # The correct header Content-Type header for an Atom feed is
    # application/atom+xml. However, Chromium does not handle it
    # correctly (see https://code.google.com/p/chromium/issues/detail?id=104358).
    #
    # The most compatible header is 'text/xml; charset=utf-8', which
    # will cause the feed to be parsed correctly by most clients.
    # Note that you should be encoding your feed in UTF-8.
    Content-Type = 'text/xml; charset=utf-8'

[[headers]]
  for = '/*/feeds/*.xml'
  [headers.values]
    # The same reason as above applies to Atom feeds.
    Content-Type = 'text/xml; charset=utf-8'

[[headers]]
  for = '/feeds/*.json'
  [headers.values]
    # JSON Feed files should be served using the MIME type application/json
    # and should be encoded using UTF-8.
    Content-Type = 'application/feed+json; charset=utf-8'

[[headers]]
  for = '/*/feeds/*.json'
  [headers.values]
    Content-Type = 'application/feed+json; charset=utf-8'

[[headers]]
  for = '/manifest.webmanifest'
  [headers.values]
    # The .webmanifest extension is specified in the Media type registration
    # section of the specification (the response of the manifest file should
    # return Content-Type: application/manifest+json).
    #
    # For more see: https://w3c.github.io/manifest/#media-type-registration=
    Content-Type = 'application/manifest+json; charset=utf-8'

[[headers]]
  for = '/robots.txt'
  [headers.values]
    # The server’s robots.txt file must be saved as plain text with
    # ASCII character encoding.
    Content-Type = 'text/plain; charset=us-ascii'

[[redirects]]
  from = '/posts'
  to = '/posts.html'
  status = 301
  force = false

[[redirects]]
  from = '/feeds/rss/posts.xml'
  to = '/feeds/feed.rss.xml'
  status = 301
  force = false

[[redirects]]
  from = '/feeds/atom/posts.xml'
  to = '/feeds/feed.atom.xml'
  status = 301
  force = false

[[redirects]]
  from = '/pages/about.html'
  to = '/about.html'
  status = 301
  force = false

[[redirects]]
  from = '/page/about.html'
  to = '/about.html'
  status = 301
  force = false

[[redirects]]
  from = '/static/serghei.asc'
  to = '/serghei.asc'
  status = 301
  force = false

[[redirects]]
  from = '/post/2021/9/14/zapusk-celery-zadachi-posle-vypolneniya-vseh-zadach.html'
  to = '/posts/2021/09/14/zapusk-celery-zadachi-posle-vypolneniya-vseh-zadach.html'
  status = 301
  force = false

[[redirects]]
  from = '/post/2021/10/8/processy-potoki-i-konkurentnoe-vypolnenie-programm.html'
  to = '/posts/2021/10/08/processy-potoki-i-konkurentnoe-vypolnenie-programm.html'
  status = 301
  force = false

[[redirects]]
  from = '/post/2021/10/8/opisanie-potoka.html'
  to = '/posts/2021/10/08/processy-potoki-i-konkurentnoe-vypolnenie-programm.html'
  status = 301
  force = false

[[redirects]]
  from = '/post/2021/10/8/opisanie-processa.html'
  to = '/posts/2021/10/08/processy-potoki-i-konkurentnoe-vypolnenie-programm.html'
  status = 301
  force = false

[[redirects]]
  from = '/post/%D1%8F%D0%B7%D1%8B%D0%BA-%D1%8F%D0%B7%D1%8B%D0%BA%D0%BE%D0%B2-%D1%87%D0%B0%D1%81%D1%82%D1%8C-%D0%BF%D0%B5%D1%80%D0%B2%D0%B0%D1%8F'
  to = '/posts/2019/03/19/yazyk-yazykov-chast-pervaya.html'
  status = 301
  force = false

[[redirects]]
  from = '/post/2019/03/19/yazyk-yazykov-chast-pervaya.html'
  to = '/posts/2019/03/19/yazyk-yazykov-chast-pervaya.html'
  status = 301
  force = false

[[redirects]]
  from = '/post/2019/3/19/yazyk-yazykov-chast-pervaya.html'
  to = '/posts/2019/03/19/yazyk-yazykov-chast-pervaya.html'
  status = 301
  force = false

[[redirects]]
  from = '/post/%D1%8F%D0%B7%D1%8B%D0%BA-%D1%8F%D0%B7%D1%8B%D0%BA%D0%BE%D0%B2-%D1%87%D0%B0%D1%81%D1%82%D1%8C-%D0%B2%D1%82%D0%BE%D1%80%D0%B0%D1%8F'
  to = '/posts/2019/06/28/yazyk-yazykov-chast-vtoraya.html'
  status = 301
  force = false

[[redirects]]
  from = '/post/2019/06/28/yazyk-yazykov-chast-vtoraya.html'
  to = '/posts/2019/06/28/yazyk-yazykov-chast-vtoraya.html'
  status = 301
  force = false

[[redirects]]
  from = '/post/2019/6/28/yazyk-yazykov-chast-vtoraya.html'
  to = '/posts/2019/06/28/yazyk-yazykov-chast-vtoraya.html'
  status = 301
  force = false

[[redirects]]
  from = '/post/2021/4/14/shpargalka-po-osnovnym-komandam-gpg.html'
  to = '/posts/2021/04/14/shpargalka-po-osnovnym-komandam-gpg.html'
  status = 301
  force = false

# Tags redirection

[[redirects]]
  from = '/posts/tagged/celery'
  to = '/tags/celery.html'
  status = 301
  force = false

[[redirects]]
  from = '/posts/tagged/gpg'
  to = '/tags/gpg.html'
  status = 301
  force = false

[[redirects]]
  from = '/posts/tagged/python'
  to = '/tags/python.html'
  status = 301
  force = false

[[redirects]]
  from = '/posts/tagged/bnf'
  to = '/tags/bnf.html'
  status = 301
  force = false

[[redirects]]
  from = '/posts/tagged/parsing'
  to = '/tags/parsing.html'
  status = 301
  force = false

[[redirects]]
  from = '/posts/tagged/grammars'
  to = '/tags/grammar.html'
  status = 301
  force = false

[[redirects]]
  from = '/posts/tagged/cheatsheet'
  to = '/tags/cheatsheet.html'
  status = 301
  force = false

[[redirects]]
  from = '/posts/tagged/system-programming'
  to = '/tags/system-programming.html'
  status = 301
  force = false

[[redirects]]
  from = '/posts/tagged/threading'
  to = '/tags/threading.html'
  status = 301
  force = false

[[redirects]]
  from = '/posts/tagged/posix'
  to = '/tags/posix.html'
  status = 301
  force = false
